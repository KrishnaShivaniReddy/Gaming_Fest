# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmMcLrIvAKXT6NNCHKIiIqo85R_BYV9H
"""



import random 
#Considering Biweekly Progress.
Tuesdays = [2,9]
#d1 is a dictionary with player_id as key and list of scores in respective game_id as value.
d1= {} 
#Considering a,b,c,d,e as game_id's nomenclature.
a=b=c=d=e=0
#On first day of August.
for player_id in range(1,625):
    #using random func to know what game_id is the player choosing!
    game_id = random.randint(0,4)
    if game_id==0:
      a+=1
    elif game_id==1:
      b+=1
    elif game_id==2:
      c+=1
    elif game_id==3:
      d+=1
    else:
      e+=1
    #initiallizing the value of d1 as 0.
    d1[player_id] = [0,0,0,0,0] 
    #scoring is assigned to player_id wrt game_id.
    d1[player_id][game_id] += random.randint(75,200) 
#print(d) - this gives scores of player_id's on first day of match wrt game_id's.

#Using assign func to put on a condition that each game can have a maximum of 125 players.
def assig(game_id,player_id,a,b,c,d,e):
  if game_id==0:
    a+=1
    if a>125:
      game_id = random.randint(1,4)
      return assig(game_id,player_id,a,b,c,d,e)
    else:
      d1[player_id][game_id] += random.randint(75,200)
  elif game_id==1:
    b+=1
    if b>125:
      game_id = random.randint(0,4)
      return assig(game_id,player_id,a,b,c,d,e)
    else:
      d1[player_id][game_id] += random.randint(75,200)
  elif game_id==1:
    c+=1
    if c>125:
      game_id = random.randint(0,4)
      return assig(game_id,player_id,a,b,c,d,e)
    else:
      d1[player_id][game_id] += random.randint(75,200)
  elif game_id==1:
    d+=1
    if d>125:
      game_id = random.randint(0,4)
      return assig(game_id,player_id,a,b,c,d,e)
    else:
      d1[player_id][game_id] += random.randint(75,200)
  else:
    e+=1
    if d>125:
      game_id = random.randint(0,4)
      return assig(game_id,player_id,a,b,c,d,e)
    else:
      d1[player_id][game_id] += random.randint(75,200)

#Calling the func and assigning scores for players_id's for upto 2 weeks
for day_num in [3,4,5,6,7,8,10,11,12,13,14]:
    for player_id in range(1,625):
      game_id = random.randint(0,4)
      assig(game_id,player_id,a,b,c,d,e)
#d1 is the scores(till two weeks) of player_id's wrt game_id
print("d1 is the scores(till two weeks) of player_id's wrt game_id")
print(d1)
#top5 is list to store the scores of player_id for particular game_id
top5=[]
#top55 is a duplicate of top5 and being sorted in descending order to know high scorers
top55=[]
#bottom5 is a duplicate of top5 and being sorted in ascending order to know high scorers
bottom5 = []
print(" ")
print("Let's look into the result of top 5 and bottom 5 of game_id = 1")
print(" ")
for temp in range(5):
  for i in range(1,625):
    k = d1[i][temp]
    top5.append(k)
  top55=top5[:] 
  top55.sort(reverse=True)
  bottom5=top5[:]
  bottom5.sort()
#print(*top5)
#print(*top55)
#print(*bottom5)
  print(" ")
  print("Let's look into the result of top 5 and bottom 5 of game_id =",temp+1)
  print(" ")
  for i in range(5):
    ele = top55[i]
    print("players Id with "+ str(top5.index(ele))+" has stood in "+str(i+1)+" place in game_id="+str(temp+1)+" with a score of "+str(ele))
  print(" ")
  #for knowing bottom5
  for i in range(5):
    ele = bottom5[i]
    print("players Id with "+ str(top5.index(ele))+" has stood in "+str(i+1)+" place from bottom in game_id="+str(temp+1)+" with a score of "+str(ele))
#k1 is the list taken to store sum of scores in all games of each player_id
k1=[]
#Overall Toppers (eventually top5 when taken average as well)
print(" ")
print("Overall Toppers (eventually top5 when taken average as well)")
print(" ")
for a in range(1,625):
  k = 0
  for i in range(5):
    k +=d1[a][i]
  k1.append(k)
#k2 is the duplicate list of k1 taken to sort in descending order to get high scorers 
k2=k1[:]
#print(*k1)
k2.sort(reverse=True)
for i in range(5):
    ele = k2[i]
    print("players Id with "+ str(k1.index(ele))+" has stood in "+str(i+1)+" place in overall with a score of "+str(ele))

